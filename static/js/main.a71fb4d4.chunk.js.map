{"version":3,"sources":["ToDoList/EditTask/EditTask.tsx","ToDoList/OpenTask/OpenTask.tsx","ToDoList/ToDoList.tsx","App.tsx","mst/model/Tasks.ts","mst/model/Root.ts","serviceWorker.ts","index.tsx"],"names":["EditTask","observer","task","useState","editableTask","setEditableTask","handleSubmit","setTask","toggleEdit","className","onChange","e","target","value","onKeyPress","key","type","placeholder","onClick","OpenTask","toggleTruncate","id","ToDoList","tasks","map","i","checked","complete","toggleComplete","length","slice","truncateTask","icon","faEdit","remove","faTrash","truncate","edit","App","store","show","setShow","newTask","setNewTask","addToDo","shortid","hideCompleted","allTasks","TaskModel","types","model","string","optional","boolean","actions","self","getParent","deleteTask","cast","set","create","item","destroy","views","values","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a71fb4d4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./EditTask.css\";\nimport { observer } from \"mobx-react\";\nimport { Task } from \"../../mst/model/Root\";\n\ninterface Props {\n  task: Task;\n}\n\nconst EditTask: React.FC<Props> = observer(({ task }) => {\n  const [editableTask, setEditableTask] = useState<string>(\"\");\n\n  // Funcion que toma el valor del input y lo setea en el useState\n  const handleChange = (e: any) => {\n    setEditableTask(e.target.value);\n  };\n\n  // Funcion que al darle click en Agregar te agrega una nueva tarea y te resetea el input\n  const handleSubmit = () => {\n    !!editableTask && task.setTask(editableTask);\n    setEditableTask(\"\");\n    task.toggleEdit();\n  };\n\n  return (\n    <div className={`editTask`}>\n      <input\n        className=\"editInput\"\n        onChange={handleChange}\n        onKeyPress={(e) => e.key === \"Enter\" && handleSubmit()}\n        value={editableTask}\n        type=\"text\"\n        placeholder=\"Cambie su tarea\"\n      />\n      <button onClick={(e) => handleSubmit()} className=\"editButton\">\n        Guardar\n      </button>\n    </div>\n  );\n});\n\nexport default EditTask;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Task } from \"../../mst/model/Root\";\nimport \"./OpenTask.css\";\n\ninterface Props {\n  task: Task;\n}\n\nconst OpenTask: React.FC<Props> = observer(({ task }) => {\n  return (\n    // Modal para ver la tarea completa\n    <div className=\"modal-background\" onClick={(e) => task.toggleTruncate()}>\n      <div id=\"openTask\">\n        <div className=\"modal-content\">\n          <p>{task.task}</p>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default OpenTask;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./ToDoList.css\";\nimport { observer } from \"mobx-react\";\nimport { Task } from \"../mst/model/Root\";\nimport EditTask from \"./EditTask/EditTask\";\nimport OpenTask from \"./OpenTask/OpenTask\";\n\ninterface Props {\n  tasks: any; // Por que Task[] no funciona?\n}\n\nconst ToDoList: React.FC<Props> = observer(({ tasks }) => {\n  // Acorta el task si es muy largo\n  const truncateTask = (task: string) => {\n    return task.length > 25 ? `${task.slice(0, 25)}...` : task;\n  };\n\n  return (\n    <div id=\"modal\">\n      <ul>\n        {/* Hace un lstado de las tareas */}\n        {tasks.map((task: Task, i: number) => (\n          <div key={i}>\n            {/* Task a hacer y tick si esta completada o no */}\n            <li className=\"item task-animation\">\n              <input\n                type=\"checkbox\"\n                checked={task.complete}\n                onChange={(e) => task.toggleComplete()}\n              />\n              <div\n                onClick={(e) => task.toggleTruncate()} // Abre el modal para que se vea el task completo\n                className={!task.complete ? `label` : `labelComplete`}\n              >\n                {truncateTask(task.task)}\n              </div>\n              {/* Iconos para editar y borrar */}\n              <div className=\"icons\">\n                <button className=\"edit\" onClick={(e) => task.toggleEdit()}>\n                  <FontAwesomeIcon icon={faEdit} />\n                </button>\n                <button className=\"delete\" onClick={(e) => task.remove()}>\n                  <FontAwesomeIcon icon={faTrash} />\n                </button>\n              </div>\n            </li>\n            {/* Despliega el completo en caso que fuese muy largo */}\n            {task.truncate && <OpenTask task={task} />}\n            {/* Despliega el input para poder editar */}\n            {task.edit && <EditTask task={task} />}\n          </div>\n        ))}\n      </ul>\n    </div>\n  );\n});\n\nexport default ToDoList;\n","import React, { useState } from \"react\";\nimport ToDoList from \"./ToDoList/ToDoList\";\nimport { observer } from \"mobx-react\";\nimport shortid from \"shortid\";\nimport \"./App.css\";\nimport { Root } from \"./mst/model/Root\";\n\ninterface Store {\n  store: Root;\n}\n\nconst App: React.FC<Store> = observer(({ store }) => {\n  const [show, setShow] = useState<boolean>(false);\n  const [newTask, setNewTask] = useState<string>(\"\");\n\n  // Funcion que muestra y oculta el listado\n  const handleClick = (): void => {\n    setShow(!show);\n  };\n\n  // Funcion que toma el valor del input y lo setea en el useState\n  const handleChange = (e: any): void => {\n    setNewTask(e.target.value);\n  };\n\n  // Funcion que al darle click en Agregar te agrega una nueva tarea y te resetea el input\n  const handleSubmit = (): void => {\n    !!newTask && store.addToDo(shortid(), newTask, false);\n    setNewTask(\"\");\n  };\n\n  return (\n    <div id=\"container\">\n      <h1>Lista de Tareas</h1>\n      {/* Boton que despliega u oculta la lista de los ToDo */}\n      <button onClick={handleClick}>\n        {show ? \"Mostrar completadas\" : \"Ocultar completadas\"}\n      </button>\n      {/* Agrega nueva tarea */}\n      <div id=\"newTask\">\n        <input\n          onChange={handleChange}\n          onKeyPress={(e) => e.key === \"Enter\" && handleSubmit()}\n          value={newTask}\n          type=\"text\"\n          placeholder=\"Nueva Tarea\"\n        />\n        <button onClick={(e) => handleSubmit()}>Agregar</button>\n      </div>\n      {/* El listado de los ToDo */}\n      <ToDoList tasks={show ? store.hideCompleted : store.allTasks} />\n    </div>\n  );\n});\n\nexport default App;\n","import { types, getParent, cast } from \"mobx-state-tree\";\nimport { Root } from \"./Root\";\n\nexport const TaskModel = types\n  .model(\"Task\", {\n    task: types.string,\n    complete: types.optional(types.boolean, false),\n    edit: types.optional(types.boolean, false),\n    truncate: types.optional(types.boolean, false),\n  })\n  .actions((self) => ({\n    // Setea la tarea a realizar\n    setTask(newTask: string) {\n      self.task = newTask;\n    },\n\n    // Cambia la tarea a completada o no\n    toggleComplete(): void {\n      self.complete = !self.complete;\n    },\n    // Permite editar la tarea\n    toggleEdit(): void {\n      self.edit = !self.edit;\n    },\n    // Despliega el modal para ver la tarea completa\n    toggleTruncate(): void {\n      self.truncate = !self.truncate;\n    },\n    // Borra la tarea\n    remove(): void {\n      const taskParent = getParent<Root>(self, 2);\n      taskParent.deleteTask(cast(self));\n    },\n  }));\n","import { types, Instance, destroy } from \"mobx-state-tree\";\nimport { TaskModel } from \"./Tasks\";\nimport { values } from \"mobx\";\n\nexport const RootStore = types\n  .model(\"Root\", {\n    tasks: types.optional(types.map(TaskModel), {}),\n  })\n  .actions((self) => ({\n    // Agrega un task nuevo\n    addToDo(id: string, task: string, complete: boolean) {\n      self.tasks.set(id, TaskModel.create({ task, complete }));\n    },\n    // Elimina task\n    deleteTask(item: Task) {\n      destroy(item);\n    },\n  }))\n  .views((self) => ({\n    // Solo se veran los tasks que no esten completos\n    get hideCompleted() {\n      return values(self.tasks).filter((task: any) => task.complete === false);\n    },\n    // Muestra todos los tasks\n    get allTasks() {\n      return values(self.tasks);\n    },\n  }));\n\nexport const store = RootStore.create({\n  tasks: { \"1\": { task: \"Agrega una nueva tarea\" } },\n});\n\nexport type Root = Instance<typeof RootStore>;\n\nexport type Task = Instance<typeof TaskModel>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./mst/model/Root\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}